name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: gmine-x86_64-unknown-linux-gnu.tar.gz
          
          # Linux ARM64 - Temporarily disabled due to OpenSSL cross-compilation issues
          # Users on ARM64 Linux can use --from-source flag
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   archive: gmine-aarch64-unknown-linux-gnu.tar.gz
          #   cross: true
          
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: gmine-x86_64-apple-darwin.tar.gz
          
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: gmine-aarch64-apple-darwin.tar.gz

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Protobuf Compiler
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install protobuf
          fi

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation dependencies
        if: matrix.cross && startsWith(matrix.target, 'aarch64-unknown-linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Install cross (if needed)
        if: matrix.cross
        run: cargo install cross

      - name: Build release binary
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --bin simple_miner --target ${{ matrix.target }}
          else
            cargo build --release --bin simple_miner --target ${{ matrix.target }}
          fi

      - name: Create archive
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/simple_miner dist/
          cd dist
          tar -czf ../${{ matrix.archive }} simple_miner
          cd ..

      - name: Generate Checksum
        run: shasum -a 256 ${{ matrix.archive }} > ${{ matrix.archive }}.sha256

      - name: Upload Checksum Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.archive }}.sha256
          asset_name: ${{ matrix.archive }}.sha256
          asset_content_type: text/plain

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.archive }}
          asset_name: ${{ matrix.archive }}
          asset_content_type: application/gzip

  # Build and upload the Node.js bridge as a separate asset
  upload-bridge:
    name: Upload Bridge
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build bridge
        run: |
          cd bridge
          npm ci
          npm run build
          cd ..

      - name: Create bridge archive
        run: |
          tar -czf gmine-bridge.tar.gz bridge/

      - name: Generate Bridge Checksum
        run: shasum -a 256 gmine-bridge.tar.gz > gmine-bridge.tar.gz.sha256

      - name: Upload Bridge Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./gmine-bridge.tar.gz.sha256
          asset_name: gmine-bridge.tar.gz.sha256
          asset_content_type: text/plain

      - name: Upload Bridge Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./gmine-bridge.tar.gz
          asset_name: gmine-bridge.tar.gz
          asset_content_type: application/gzip