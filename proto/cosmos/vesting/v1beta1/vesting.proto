syntax = "proto3";
package cosmos.vesting.v1beta1;

import "cosmos/base/v1beta1/coin_simple.proto";
import "cosmos/auth/v1beta1/auth_simple.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/auth/vesting/types";

// BaseVestingAccount implements the VestingAccount interface. It contains all
// the necessary fields needed for any vesting account implementation.
message BaseVestingAccount {
  cosmos.auth.v1beta1.BaseAccount base_account = 1;
  repeated cosmos.base.v1beta1.Coin original_vesting = 2;
  repeated cosmos.base.v1beta1.Coin delegated_free = 3;
  repeated cosmos.base.v1beta1.Coin delegated_vesting = 4;
  int64 end_time = 5;
}

// ContinuousVestingAccount implements the VestingAccount interface. It
// continuously vests by unlocking coins linearly with respect to time.
message ContinuousVestingAccount {
  BaseVestingAccount base_vesting_account = 1;
  int64 start_time = 2;
}

// DelayedVestingAccount implements the VestingAccount interface. It vests all
// coins after a specific time, but non prior. In other words, it keeps them
// locked until a specified time.
message DelayedVestingAccount {
  BaseVestingAccount base_vesting_account = 1;
}

// Period defines a length of time and amount of coins that will vest.
message Period {
  int64 length = 1;
  repeated cosmos.base.v1beta1.Coin amount = 2;
}

// PeriodicVestingAccount implements the VestingAccount interface. It
// periodically vests by unlocking coins during each specified period.
message PeriodicVestingAccount {
  BaseVestingAccount base_vesting_account = 1;
  int64 start_time = 2;
  repeated Period vesting_periods = 3;
}

// PermanentLockedAccount implements the VestingAccount interface. It does
// not ever release coins, locking them indefinitely. Coins in this account can
// still be used for delegating and for governance votes even while locked.
message PermanentLockedAccount {
  BaseVestingAccount base_vesting_account = 1;
}